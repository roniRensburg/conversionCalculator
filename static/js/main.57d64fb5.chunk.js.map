{"version":3,"sources":["ContextAPI.js","components/exchangeList.jsx","components/exchange.jsx","components/update.jsx","components/menu.jsx","App.js","serviceWorker.js","index.js"],"names":["context","React","createContext","Provider","Consumer","ExchangeList","props","floorConversion","Math","floor","conversion","style","borderStyle","margin","width","height","borderRadius","index","from","to","val","onClick","del","color","position","left","padding","numberInput","Exchange","useState","setFrom","setNumberInput","setTo","flag","setFlag","display","flexDirection","alignItems","justifyContent","backgroundColor","paddingBottom","className","onChange","element","target","value","allOptions","map","e","name","isNaN","Number","alert","placeholder","type","disabled","nam","handleDisablenButton","fromVal","toVal","i","length","add","handleInputs","allChecks","Update","setName","setValue","scope","some","updateCoin","addCoins","Menu","border","App","setAllChecks","setAllOptions","addType","tempList","filter","newCoins","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.57d64fb5.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst context = React.createContext();\r\n\r\nexport const Provider = context.Provider;\r\nexport const Consumer = context.Consumer;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Consumer } from \"../ContextAPI\";\r\nimport Exchange from \"./exchange\";\r\n\r\nexport default function ExchangeList(props) {\r\n  const floorConversion = Math.floor(props.conversion);\r\n  return (\r\n    <div>\r\n      <div>\r\n        <div\r\n          style={{\r\n            borderStyle: \"solid\",\r\n            margin: \"20px\",\r\n            width: \"300px\",\r\n            height: \"120px\",\r\n            borderRadius: \"20px\",\r\n          }}\r\n        >\r\n          <p>{`#${props.index + 1}`}</p>\r\n          {`From ${props.from} To ${props.to}`}\r\n          <Consumer>\r\n            {(val) => {\r\n              return (\r\n                <button\r\n                  onClick={() => val.del(props.index)}\r\n                  style={{\r\n                    borderRadius: \"50%\",\r\n                    color: \"red\",\r\n                    position: \"relative\",\r\n                    left: \"35px\",\r\n                    padding: \"10px\",\r\n                    width: \"45px\",\r\n                  }}\r\n                >\r\n                  X\r\n                </button>\r\n              );\r\n            }}\r\n          </Consumer>\r\n          <br />\r\n\r\n          {`${props.numberInput} = ${floorConversion}`}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Consumer } from \"../ContextAPI\";\r\nimport ExchangeList from \"./exchangeList\";\r\n\r\nexport default function Exchange(props) {\r\n  const [from, setFrom] = useState(\"\");\r\n  const [numberInput, setNumberInput] = useState(\"\");\r\n  const [to, setTo] = useState(\"\");\r\n  const [flag, setFlag] = useState(false);\r\n\r\n  //handle input must be numbers only\r\n  const handleInputNumber = (element) => {\r\n    if (!isNaN(Number(element.target.value))) {\r\n      setNumberInput(element.target.value);\r\n    } else alert(\"Input must ne numbers only!\");\r\n  };\r\n\r\n  //handle the disable button\r\n  const handleDisablenButton = (from, to, numberInput) => {\r\n    if (\r\n      from === props.allOptions.name ||\r\n      to === props.allOptions.nam ||\r\n      numberInput === \"\"\r\n    ) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  //handle the conversion\r\n  const handleInputs = (from, to, numberInput) => {\r\n    let fromVal = 0;\r\n    let toVal = 0;\r\n    let conversion = 0;\r\n    for (let i = 0; i < props.allOptions.length; i++) {\r\n      if (props.allOptions[i].name === from) {\r\n        fromVal = props.allOptions[i].value;\r\n      }\r\n      if (props.allOptions[i].name === to) {\r\n        toVal = props.allOptions[i].value;\r\n      }\r\n      conversion = (fromVal / toVal) * numberInput;\r\n    }\r\n    alert(Math.floor(conversion));\r\n    props.add(from, to, numberInput, fromVal, toVal, conversion);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n      }}\r\n    >\r\n      <div\r\n        style={{\r\n          backgroundColor: \"lightgray\",\r\n          height: \"100%\",\r\n          width: \"400px\",\r\n          padding: \"30px\",\r\n          borderRadius: \"20px\",\r\n          paddingBottom: \"100px\",\r\n        }}\r\n      >\r\n        <h1>Exchange</h1>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            alignItems: \"left\",\r\n            justifyContent: \"left\",\r\n            margin: \"7px\",\r\n          }}\r\n        >\r\n          <p>From :</p>\r\n          <select\r\n            className=\"form-select-sm\"\r\n            onChange={(element) => setFrom(element.target.value)}\r\n          >\r\n            <option>Type</option>\r\n            {props.allOptions.map((e) => {\r\n              return <option>{e.name}</option>;\r\n            })}\r\n          </select>\r\n          <input\r\n            onChange={handleInputNumber}\r\n            placeholder=\"Enter your number\"\r\n            type=\"text\"\r\n          />\r\n        </div>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            alignItems: \"left\",\r\n            justifyContent: \"left\",\r\n            margin: \"7px\",\r\n          }}\r\n        >\r\n          <p>To :</p>\r\n          <select\r\n            style={{ position: \"relative\", left: \"20px\" }}\r\n            className=\"form-select-sm\"\r\n            onChange={(element) => setTo(element.target.value)}\r\n          >\r\n            <option>Type</option>\r\n            {props.allOptions.map((e) => {\r\n              return <option>{e.name}</option>;\r\n            })}\r\n          </select>\r\n        </div>\r\n        <br />\r\n        <button\r\n          type=\"button\"\r\n          disabled={handleDisablenButton(from, to, numberInput)}\r\n          onClick={() => {\r\n            handleInputs(from, to, numberInput);\r\n          }}\r\n        >\r\n          Start\r\n        </button>\r\n        <br />\r\n        <Link to=\"/Update\">\r\n          <button>Update</button>\r\n        </Link>\r\n        <Link to=\"https://www.facebook.com/\">\r\n          <button>Share on FACEBOOK</button>\r\n        </Link>\r\n        <button\r\n          onClick={() => {\r\n            setFlag(!flag);\r\n          }}\r\n        >\r\n          View your exchange list\r\n        </button>\r\n        {!flag}\r\n        {props.allChecks.map((e, i) => {\r\n          return (\r\n            <div>\r\n              <ExchangeList\r\n                e={e}\r\n                index={i}\r\n                from={e.from}\r\n                to={e.to}\r\n                numberInput={e.numberInput}\r\n                fromVal={e.fromVal}\r\n                toVal={e.toVal}\r\n                conversion={e.conversion}\r\n              />\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Consumer } from \"../ContextAPI\";\r\n\r\nexport default function Update(props) {\r\n  const [name, setName] = useState(\"\");\r\n  const [value, setValue] = useState(\"\");\r\n\r\n  const handleValueInput = (e) => {\r\n    if (isNaN(Number(e.target.value))) {\r\n      alert(\"Value mast be numbers only!\");\r\n    } else {\r\n      setValue(e.target.value);\r\n    }\r\n  };\r\n\r\n  const handleNameInput = (e) => {\r\n    if (!isNaN(Number(e.target.value))) {\r\n      alert(\"Type must be english letters only!\");\r\n    } else {\r\n      setName(e.target.value);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n      }}\r\n    >\r\n      <div\r\n        style={{\r\n          backgroundColor: \"lightgray\",\r\n          height: \"100%\",\r\n          width: \"450px\",\r\n          borderRadius: \"20px\",\r\n          padding: \"30px\",\r\n        }}\r\n      >\r\n        <h1>Update</h1>\r\n        <table className=\"table\">\r\n          <thead>\r\n            <tr>\r\n              <th scope=\"col\">TYPE</th>\r\n              <th scope=\"col\">VALUE</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {props.allOptions.map((e) => (\r\n              <tr>\r\n                <td>{e.name}</td>\r\n                <td>{e.value}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            alignItems: \"left\",\r\n            justifyContent: \"left\",\r\n            padding: \"20px\",\r\n          }}\r\n        >\r\n          <p>Type:</p>\r\n          <input\r\n            onChange={handleNameInput}\r\n            style={{ position: \"relative\", left: \"40px\" }}\r\n          />\r\n        </div>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            alignItems: \"left\",\r\n            justifyContent: \"left\",\r\n            padding: \"20px\",\r\n          }}\r\n        >\r\n          <p>New Value: </p>\r\n          <input onChange={handleValueInput} />\r\n        </div>\r\n        <div>\r\n          <Link to=\"/\">\r\n            <button>BACK</button>\r\n          </Link>\r\n        </div>\r\n        <div>\r\n          <Consumer>\r\n            {(val) => {\r\n              return (\r\n                <button\r\n                  onClick={() => {\r\n                    if (\r\n                      props.allOptions.some((element) => element.name === name)\r\n                    )\r\n                      val.updateCoin(name, value);\r\n                    else {\r\n                      val.addCoins(name, value);\r\n                    }\r\n                  }}\r\n                >\r\n                  UPDATE\r\n                </button>\r\n              );\r\n            }}\r\n          </Consumer>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Menu() {\r\n  return (\r\n    <div>\r\n      <div className=\"row\" style={{ border: \"2px solid gray\" }}>\r\n        <div className=\"col\">\r\n          <Link to=\"/\"></Link>\r\n        </div>\r\n        <div className=\"col\">\r\n          <Link to=\"/Update\"></Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport { Provider } from \"./ContextAPI\";\nimport Exchange from \"./components/exchange\";\nimport Update from \"./components/update.jsx\";\nimport Menu from \"./components/menu\";\n\nexport default function App() {\n  const [allChecks, setAllChecks] = useState([]);\n  const [allOptions, setAllOptions] = useState([\n    { name: \"Dollar\", value: 3.9 },\n    { name: \"Euro\", value: 4.2 },\n    { name: \"Shekel\", value: 1 },\n  ]);\n\n  const addType = (from, to, numberInput, fromVal, toVal, conversion) => {\n    setAllChecks([\n      ...allChecks,\n      { from, to, numberInput, fromVal, toVal, conversion },\n    ]);\n  };\n\n  const deleteFromExchangeList = (i) => {\n    let tempList = allChecks.filter((element, index) => index !== i);\n    setAllChecks(tempList);\n  };\n\n  const addCoins = (name, value) => {\n    setAllOptions([\n      {\n        name,\n        value,\n      },\n      ...allOptions,\n    ]);\n  };\n\n  const updateCoin = (name, value) => {\n    let newCoins = [...allOptions];\n    for (let i = 0; i < newCoins.length; i++) {\n      if (newCoins[i].name === name) {\n        newCoins[i].value = value;\n      }\n    }\n    setAllOptions(newCoins);\n  };\n\n  return (\n    <div className=\"App\">\n      <Provider\n        value={{\n          del: deleteFromExchangeList,\n          addCoins: addCoins,\n          updateCoin: updateCoin,\n        }}\n      >\n        <Router>\n          <Menu />\n          <Switch>\n            <Route\n              exact\n              path=\"/\"\n              component={() => {\n                return (\n                  <Exchange\n                    add={addType}\n                    allChecks={allChecks}\n                    allOptions={allOptions}\n                  />\n                );\n              }}\n            />\n            <Route\n              exact\n              path=\"/Update\"\n              component={() => {\n                return <Update allChecks={allChecks} allOptions={allOptions} />;\n              }}\n            />\n          </Switch>\n        </Router>\n      </Provider>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}